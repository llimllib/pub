http://c.learncodethehardway.org/book/learn-c-the-hard-waych27.html#x32-15500027.3:

---------------------------------------------------------------------------------
PREFIX?=/usr/local 
CFLAGS=-g -Wall -I${PREFIX}/apr/include/apr-1  -I${PREFIX}/apr/include/apr-util-1 
LDFLAGS=-lapr-1 -pthread -laprutil-1 
 
all: devpkg 
 
devpkg: bstrlib.o db.o shell.o commands.o 
 
install: all 
        install -d $(DESTDIR)/$(PREFIX)/bin/ 
        install devpkg $(DESTDIR)/$(PREFIX)/bin/ 
 
clean: 
        rm -f *.o 
        rm -f devpkg 
        rm -rf *.dSYM
---------------------------------------------------------------------------------

* I don't like that it knows how to build .o files without being told
    * do I care about the env vars? Unix way and whatnot?
* I love the simplicity of "<cmd> <args>" with no interference

---------------------------------------------------------------------------------
from pub import task
from pub.shortcuts import rm, gcc
from pub.shortcuts import install as install_

PREFIX += "/usr/local"
CFLAGS = "-g -Wall -I${PREFIX}/apr/include/apr-1  -I${PREFIX}/apr/include/apr-util-1"
LDFLAGS = "-lapr-1 -pthread -laprutil-1"

def compile(files):
    for file in files:
        gcc(file, CFLAGS) #XXX: reasonable?

@task("bstrlib.c", "db.c", "shell.c", "commands.c", default=True)
def devpkg(changed_files):
    compile(changed_files))

@task(devpkg)
def install():
    install_("-d", DESTDIR/PREFIX/bin)
    install_("devpkg", DESTDIR/PREFIX/bin)

@task
def clean():
    rm("-f", "*.o")
    rm("-f", "devpkg")
    rm("-rf", "*.dSYM")
---------------------------------------------------------------------------------

* automatically translate env vars? How should those work?
* NOTE: default=True means that "pub" with no arguments runs this command
* is changed_files good? That is, if "shell.c" has been updated, and no other file
  in the dependency list, the function takes a list of the updated files.
  Should it be ["db.c", ...] or [filehandle<db.c>, ...]?

install -> devpkg -> /- bstrlib.c
                     |- db.c
                     |- shell.c
                     \- commands.c

make sure we have a dependency tree, not a graph.


https://github.com/mojombo/jekyll/blob/master/Rakefile

* I like that it's just ruby, so helpers like:

def gem_file
  "#{name}-#{version}.gem"
end

are super simple

* How would I translate this:

---------------------------------------------------------------------------------
desc "Generate RCov test coverage and open in your browser"
task :coverage do
  require 'rcov'
  sh "rm -fr coverage"
  sh "rcov test/test_*.rb"
  sh "open coverage/index.html"
end
---------------------------------------------------------------------------------

into python?

---------------------------------------------------------------------------------
@pub.task
def coverage():
    import rcov

    pub.sh("rm -rf coverage")
    pub.sh("rcov test/test_*.rb")
    pub.sh("open coverage/index.html")
---------------------------------------------------------------------------------
from pub import task, sh

@task
def coverage():
    import rcov

    sh("rm -rf coverage")
    sh("rcov test/test_*.rb")
    sh("open coverage/index.html")
---------------------------------------------------------------------------------

* sh should just be envoy.run: https://github.com/kennethreitz/envoy

* Is there any reason to differentiate between file tasks and regular tasks?
    * If I don't, how will I determine if a dependency is a file or a task?
        * i.e. @task("dep1", "dep2", "bstr.c")
            * clearly bstr.c is a file (illegal python func name)
            * but what about dep1 and dep2?
                * assume they're tasks if there's no file extension?
                    * require you to specify with file("dep1") if you want it to be a file?
